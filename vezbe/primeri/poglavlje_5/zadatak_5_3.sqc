#include <stdio.h>
#include <stdlib.h>

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
short sk_godina;
char naziv[31],
     oznaka[21];
EXEC SQL END DECLARE SECTION;

void is_error(const char *str)
{
    if(SQLCODE < 0)
    {
        fprintf(stderr, "Greska %d: %s\n", SQLCODE, str);

        EXEC SQL ROLLBACK;

        EXEC SQL CONNECT RESET;
        exit(EXIT_FAILURE);
    }
}

int main()
{
    EXEC SQL CONNECT TO stud2020 USER student USING abcdef;
    is_error("Connect");

    // Primetimo da smo morali da navedemo klauzu WITH HOLD ovde
    // zato sto vrsimo potvrdjivanje izmena tokom obrade kursora.
    EXEC SQL 
        DECLARE ispitni_rokovi CURSOR WITH HOLD FOR 
        SELECT  NAZIV,
                SKGODINA,
                OZNAKAROKA
        FROM    DA.ISPITNIROK IR
        WHERE   EXISTS (
                    SELECT  *
                    FROM    DA.ISPIT I
                    WHERE   I.SKGODINA = IR.SKGODINA AND
                            I.OZNAKAROKA = IR.OZNAKAROKA
                );
    is_error("Declare");

    EXEC SQL OPEN ispitni_rokovi;
    is_error("Open");

    for(;;)
    {
        EXEC SQL 
            FETCH   ispitni_rokovi 
            INTO    :naziv,
                    :sk_godina,
                    :oznaka;
        is_error("Fetch");

        if(SQLCODE == 100)
        {
            break;
        }

        printf("Obradjujem ispitni rok %s u %hd. godini\n"
            "Da li zelite da obrisete polaganja u ovom ispitnom roku? [d/n] ", naziv, sk_godina);
            
        char odgovor_od_korisnika;
        scanf("%c", &odgovor_od_korisnika);
        getchar(); // Za citanje novog reda

        if (odgovor_od_korisnika == 'n')
        {
            printf("Preskacem obradu za ovaj ispitni rok\n\n");
            
            continue;
        }
        
        EXEC SQL
            DELETE  FROM DA.ISPIT
            WHERE   SKGODINA = :sk_godina AND
                    OZNAKAROKA = :oznaka;
        is_error("Delete");
        
        // Da nismo naveli klauzu WITH HOLD pri deklaraciji kursora, 
        // onda bi naredni poziv naredbe COMMIT zatvorio kursor,
        // pa bi poziv FETCH naredbe u narednoj iteraciji petlje prijavio gresku 
        // (jer dohvatamo podatak nad zatvorenim kursorom).
        EXEC SQL COMMIT;
        is_error("Commit");
        
        printf("Podaci su uspesno obrisani\n\n");
    }

    EXEC SQL CLOSE ispitni_rokovi;    
    is_error("Close");

    EXEC SQL COMMIT;
    is_error("Potvrdjivanje izmena");
    
    EXEC SQL CONNECT RESET;
    is_error("Connect reset");

    return 0;
}
 
