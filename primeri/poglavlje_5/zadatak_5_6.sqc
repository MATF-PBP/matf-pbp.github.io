#include <stdio.h>
#include <stdlib.h>
#include <string.h>

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
sqlint32 indeks;
short godina;
char naziv[201];
short ocena;
EXEC SQL END DECLARE SECTION;

void is_error(const char *err) {
    if (SQLCODE < 0) {
        printf("SQLCODE %d: %s\n\n", SQLCODE, err);
    
        EXEC SQL ROLLBACK;
        exit(EXIT_FAILURE);
    }
}

void deklarisi_kursor_za_godine(sqlint32 indeks);
unsigned godine_polozenih_ispita();
void deklarisi_kursor_za_polaganja(sqlint32 indeks, short godina);
void polaganja_za_studenta_u_godini(sqlint32 indeks, short godina);

char odgovor[3];

int main() {
    EXEC SQL CONNECT TO vstud USER student USING abcdef;
    is_error("Connect");

    deklarisi_kursor_za_godine(indeks);
    deklarisi_kursor_za_polaganja(indeks, godina);
    
    for(;;) {
        printf("\n----------POCETAK TRANSAKCIJE----------\n\n");
        
        printf("Unesite indeks studenta: ");
        scanf("%d", &indeks);
        
        unsigned br_neobradjenih_godina = godine_polozenih_ispita();
        
        if (br_neobradjenih_godina == 0) {
            printf(
                "Za datog studenta ne postoji obradjena godina "
                "u kojoj su polagali neke ispite\n");
            continue;
        }
        
        printf("Unesite jednu od ponudjenih godina polaganja: ");
        scanf("%hd", &godina);
        
        polaganja_za_studenta_u_godini(indeks, godina);
        
        EXEC SQL COMMIT;
        is_error("Commit transakcije");
        
        printf("\n----------KRAJ TRANSAKCIJE----------\n");
        
        printf("\nDa li zelite da nastavite dalje? [da/ne] ");
        scanf("%s", odgovor);
        
        if (strcmp(odgovor, "da") != 0) {
            break;
        }
    }
    
    EXEC SQL COMMIT;
    is_error("Commit");
    
    EXEC SQL CONNECT RESET;
    is_error("Connect reset");
    
    return 0;
}

void deklarisi_kursor_za_godine(sqlint32 indeks) {
    EXEC SQL 
        DECLARE c_godine CURSOR FOR
        SELECT  DISTINCT 
                GODINA_ROKA
        FROM    ISPIT I
        WHERE   INDEKS = :indeks AND
                OCENA > 5 AND
                STATUS_PRIJAVE = 'o' AND
                NOT EXISTS (
                    SELECT  *
                    FROM    OBRADJENA_POLAGANJA
                    WHERE   INDEKS = :indeks AND
                            GODINA = I.GODINA_ROKA
                )
        FOR     READ ONLY;
    is_error("Declare c_godine");
}

unsigned godine_polozenih_ispita() {
    unsigned br_neobradjenih_godina = 0u;
    
    EXEC SQL OPEN c_godine;
    is_error("Open c_godine");
    
    for(;;) {
        EXEC SQL 
            FETCH   c_godine
            INTO    :godina;
        is_error("Fetch c_godine");
        
        if (SQLCODE == 100) {
            break;
        }
        
        printf("\t%hd\n", godina);
        ++br_neobradjenih_godina;
    }
    
    EXEC SQL CLOSE c_godine;
    is_error("Close c_godine");
    
    return br_neobradjenih_godina;
}

void deklarisi_kursor_za_polaganja(sqlint32 indeks, short godina) {
    EXEC SQL 
        DECLARE c_polozeni CURSOR WITH HOLD FOR
        SELECT  (
                    SELECT  TRIM(P.NAZIV)
                    FROM    PREDMET P
                    WHERE   I.ID_PREDMETA = P.ID_PREDMETA
                ) AS NAZIV_PREDMETA,
                I.OCENA
        FROM    ISPIT I
        WHERE   I.INDEKS = :indeks AND
                I.GODINA_ROKA = :godina AND
                OCENA > 5 AND
                STATUS_PRIJAVE = 'o'
        FOR     UPDATE OF STATUS_PRIJAVE;
    is_error("Declare c_polozeni");
}

void polaganja_za_studenta_u_godini(sqlint32 indeks, short godina) {
    EXEC SQL 
        INSERT  INTO OBRADJENA_POLAGANJA
        VALUES  (:indeks, :godina);
    is_error("Insert into");
    
    EXEC SQL
        SAVEPOINT s_obradjeni ON ROLLBACK RETAIN CURSORS;
    is_error("Savepoint");
    
    EXEC SQL OPEN c_polozeni;
    is_error("Open c_polozeni");
    
    for (;;) {
        EXEC SQL 
            FETCH   c_polozeni
            INTO    :naziv,
                    :ocena;
        is_error("Fetch c_polozeni");
        
        if (SQLCODE == 100) {
            break;
        }
        
        printf("%s, %d\n", naziv, ocena);
        printf("Da li zelite da ponistite ispit? [da/ne] ");
        scanf("%s", odgovor);
        
        if (strcmp(odgovor, "da") != 0) {
            continue;
        }
        
        EXEC SQL
            UPDATE  ISPIT
            SET     STATUS_PRIJAVE = 'x'
            WHERE   CURRENT OF c_polozeni;
        is_error("Update");
    }
    
    EXEC SQL CLOSE c_polozeni;
    is_error("Close c_polozeni");
    
    printf("Da li zelite da potvrdite sve izmene za tekuceg studenta? [da/ne] ");
    scanf("%s", odgovor);
    
    if (strcmp(odgovor, "da") != 0) {
        EXEC SQL ROLLBACK TO SAVEPOINT s_obradjeni;
        is_error("Rollback to savepoint");
    }
}
