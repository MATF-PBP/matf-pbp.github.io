#include <stdio.h>
#include <stdlib.h>

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
sqlint32 d_id;
char d_sifra[21], 
     d_naziv[201];
short d_broj_semestara, 
      d_bodovi;
EXEC SQL END DECLARE SECTION;

sqlint32 obradjeni_predmeti[1000];
unsigned broj_obradjenih_predmeta = 0u;

void is_error(const char* err);
int obradi_cekanje();
int predmet_je_obradjen(sqlint32 id);
void oznaci_kao_obradjen(sqlint32 id);

int main() {
    char odgovor_od_korisnika;
    
    EXEC SQL CONNECT TO vstud USER student USING abcdef;
    is_error("Connect");
    
    EXEC SQL SET CURRENT LOCK TIMEOUT 5;
    is_error("Set current lock timeout 5");
    
    EXEC SQL 
        DECLARE predmeti CURSOR WITH HOLD FOR 
        SELECT  ID_PREDMETA, 
                TRIM(SIFRA), 
                TRIM(NAZIV), 
                BROJ_SEMESTARA, 
                BODOVI
        FROM    PREDMET
        FOR     UPDATE OF BROJ_SEMESTARA;
    is_error("Declare predmeti");
    
    EXEC SQL OPEN predmeti;
    is_error("Open predmeti");

    for(;;) {
        EXEC SQL 
            FETCH   predmeti 
            INTO    :d_id, 
                    :d_sifra, 
                    :d_naziv, 
                    :d_broj_semestara, 
                    :d_bodovi;
        if (obradi_cekanje()) {
            continue;
        }
        is_error("Fetch predmeti");

        if (SQLCODE == 100) {
            printf("Nema vise predmeta za obradjivanje!\n");
            break;
        }

        // Provera da li je predmet vec obradjen 
        // od strane ove instance aplikacije
        if (predmet_je_obradjen(d_id)) {
            continue;
        }
            
        printf("Predmet - id = %d sifra = %.5s naziv = %.40s "
            "broj_semestara = %d bodovi = %d\n", 
            d_id, d_sifra, d_naziv, d_broj_semestara, d_bodovi);

        printf("Da li se zeli promena semestra "
            "u kome se slusa ovaj predmet? "
            "Odgovoriti sa d ili n.\n");
        scanf("%c", &odgovor_od_korisnika);
        getchar();  // novi red

        if (odgovor_od_korisnika == 'd' || odgovor_od_korisnika == 'D') {
            EXEC SQL 
                UPDATE  PREDMET
                SET     BROJ_SEMESTARA = :d_broj_semestara + 1
                WHERE   CURRENT OF predmeti;
            if (obradi_cekanje()) {
                continue;
            }
            is_error("Update");

            // Slicno kao i FETCH, naredba SELECT INTO zahteva katanac za citanje
            EXEC SQL 
                SELECT  BROJ_SEMESTARA
                INTO    :d_broj_semestara 
                FROM    PREDMET
                WHERE   ID_PREDMETA = :d_id;
            if (obradi_cekanje()) {
                continue;
            }
            is_error("Select into");

            printf("Semestar u kome se slusa predmet je sada %d\n\n", d_broj_semestara);
        }

        // Evidentiramo izmene u nizu namenjenim za to.
        oznaci_kao_obradjen(d_id);
        
        // Potvrdjivanje izmena u tekucoj transakciji
        EXEC SQL COMMIT;
        is_error("Commit");
    }

    EXEC SQL CLOSE predmeti;
    is_error("Close predmeti");

    // Vracamo istek vremena na podrazumevanu vrednost
    EXEC SQL SET CURRENT LOCK TIMEOUT NULL;
    is_error("Set current lock timeout null");

    EXEC SQL COMMIT;
    is_error("Potvrdjivanje izmena");

    EXEC SQL CONNECT RESET;
    is_error("Connect reset");

    return 0;
}

void is_error(const char* err) {
    if (SQLCODE < 0) {
        fprintf(stderr, "Greska %d: %s\n\n", SQLCODE, err);
        
        EXEC SQL ROLLBACK;
        exit(EXIT_FAILURE);
    }
}

int obradi_cekanje() {
    if (SQLCODE == -911 || SQLCODE == -913) {
        printf("Objekat je zakljucan od strane druge transakcije. "
            "Sacekati neko vreme...\n");

        EXEC SQL ROLLBACK;
        is_error("Rollback");

        EXEC SQL OPEN predmeti;    
        is_error("Open predmeti - obrada cekanja");

        return 1;
    }
    return 0;
}

int predmet_je_obradjen(sqlint32 id) {
    for (unsigned i = 0; i < broj_obradjenih_predmeta; ++i) {
        if (obradjeni_predmeti[i] == id) {
            return 1;
        }
    }
    return 0;
}

void oznaci_kao_obradjen(sqlint32 id) {
    obradjeni_predmeti[broj_obradjenih_predmeta++] = id;
}