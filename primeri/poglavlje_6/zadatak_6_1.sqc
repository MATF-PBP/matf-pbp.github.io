#include <stdio.h>
#include <stdlib.h>

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
char d_naziv[201];
short d_bodovi;
EXEC SQL END DECLARE SECTION;

// Definisemo funkciju koja ce vrsiti obradu cekanja
// u slucaju da dodje do problema u visekorisnickom okruzenju.
// Primetimo da je definicija funkcije odvojena od njene deklaracije,
// zato sto se u definiciji ove funkcije koristi kursor `c_smerovi`.
// Da se definicija nasla ispred `main` funkcije,
// Db2 pretprocesor bi izdao upozorenje da se kursor koristi pre deklaracije.
// Funkcija vraca 1 ukoliko je doslo do problema, a 0 inace.
int obradi_cekanje();
void is_error(const char* err);

int main() {
    char odgovor_od_korisnika;
    
    EXEC SQL CONNECT TO vstud USER student USING abcdef;
    is_error("Connect");
    
    // Postavljanje isteka vremena na 5 sekundi
    EXEC SQL SET CURRENT LOCK TIMEOUT 5;
    is_error("Set current lock timeout 5");
    
    EXEC SQL 
        DECLARE c_smerovi CURSOR FOR 
        SELECT  TRIM(NAZIV), 
                BODOVI
        FROM    SMER
        FOR     UPDATE OF BODOVI;
    is_error("Declare c_smerovi");
    
    EXEC SQL OPEN c_smerovi;
    is_error("Open c_smerovi");

    for(;;) {
        // Naredba FETCH dohvata jedan red iz rezultata upita.
        // Bilo da li se informacije koriste za citanje ili za eventualnu izmenu,
        // SUBP mora da dodeli aplikaciji odgovarajuci katanac.
        EXEC SQL 
            FETCH   c_smerovi 
            INTO    :d_naziv, 
                    :d_bodovi;
        if (obradi_cekanje()) {
            continue;
        }
        is_error("Fetch c_smerovi");

        if (SQLCODE == 100) {
            printf("Nema vise smerova za obradjivanje!\n");
            break;
        }
            
        printf("%s (%hd)\n", d_naziv, d_bodovi);

        printf("Da li zelite da promenite bodove za ovaj smer? [d/n] ");
        scanf("%c", &odgovor_od_korisnika);
        getchar();  // novi red

        if (odgovor_od_korisnika == 'd' || odgovor_od_korisnika == 'D') {
            printf("Unesite broj bodova: ");
            scanf("%hd", &d_bodovi);

            // Izvrsavanje naredbe UPDATE uvek trazi katanac za azuriranje podataka
            EXEC SQL 
                UPDATE  SMER
                SET     BODOVI = :d_bodovi
                WHERE   CURRENT OF c_smerovi;
            if (obradi_cekanje()) {
                continue;
            }
            is_error("Update");

            printf("Bodovi su azurirani!\n\n");
        }
    }

    EXEC SQL CLOSE c_smerovi;
    is_error("Close c_smerovi");

    // Vracamo istek vremena na podrazumevanu vrednost
    EXEC SQL SET CURRENT LOCK TIMEOUT NULL;
    is_error("Set current lock timeout null");

    EXEC SQL COMMIT;
    is_error("Potvrdjivanje izmena");

    EXEC SQL CONNECT RESET;
    is_error("Connect reset");

    return 0;
}

int obradi_cekanje() {
    if (SQLCODE == -911 || SQLCODE == -913) {
        printf("Objekat je zakljucan od strane druge transakcije. "
            "Sacekati neko vreme...\n");

        EXEC SQL OPEN c_smerovi;
        is_error("Open c_smerovi - obradi_cekanje");

        return 1;
    }
    return 0;
}